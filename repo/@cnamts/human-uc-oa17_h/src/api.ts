/* tslint:disable */
/* eslint-disable */
/**
 * Beneficiaires
 * Exemple d\'API REST implémentée par le use-case [uc-ctrl-rest-openapi](http://gitlab.com/stump/kits-java/developpement/usecases-web/uc-ctrl-rest-openapi) du starter-kit STUMP Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ddst-back-per.cnam@assurance-maladie.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Liste de BeneficiaireResource wrappée dans un champ value.
 * @export
 * @interface BeneficiaireListResponse
 */
export interface BeneficiaireListResponse {
    /**
     * 
     * @type {Array<BeneficiaireResource>}
     * @memberof BeneficiaireListResponse
     */
    'value': Array<BeneficiaireResource>;
}
/**
 * Représentation d\'un bénéficiaire.
 * @export
 * @interface BeneficiaireResource
 */
export interface BeneficiaireResource {
    /**
     * l\'identifiant unique du bénéficiaire
     * @type {number}
     * @memberof BeneficiaireResource
     */
    'id'?: number;
    /**
     * le matricule du bénéficiaire
     * @type {string}
     * @memberof BeneficiaireResource
     */
    'matricule': string;
    /**
     * la date de naissance du bénéficiaire
     * @type {string}
     * @memberof BeneficiaireResource
     */
    'date-naissance': string;
    /**
     * le rang de naissance du bénéficiaire
     * @type {number}
     * @memberof BeneficiaireResource
     */
    'rang': number;
    /**
     * le nom du bénéficiaire
     * @type {string}
     * @memberof BeneficiaireResource
     */
    'nom': string;
    /**
     * le prénom du bénéficiaire
     * @type {string}
     * @memberof BeneficiaireResource
     */
    'prenom': string;
}
/**
 * BeneficiaireResource wrappée dans un champ value.
 * @export
 * @interface BeneficiaireResponse
 */
export interface BeneficiaireResponse {
    /**
     * 
     * @type {BeneficiaireResource}
     * @memberof BeneficiaireResponse
     */
    'value': BeneficiaireResource;
}
/**
 * Représentation d\'un problème / erreur lors du traitement d\'une opération.
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * id unique de l\'occurence du problème
     * @type {string}
     * @memberof Problem
     */
    'id': string;
    /**
     * code problème
     * @type {string}
     * @memberof Problem
     */
    'code': string;
    /**
     * message détaillé du problème
     * @type {string}
     * @memberof Problem
     */
    'message': string;
    /**
     * détails supplémentaires optionnels
     * @type {object}
     * @memberof Problem
     */
    'details'?: object;
}
/**
 * Liste de Problem wrappée dans un champ problems.
 * @export
 * @interface ProblemResponse
 */
export interface ProblemResponse {
    /**
     * liste des problèmes
     * @type {Array<Problem>}
     * @memberof ProblemResponse
     */
    'problems': Array<Problem>;
}

/**
 * BeneficiaireApi - axios parameter creator
 * @export
 */
export const BeneficiaireApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Supprime un bénéficiaire identifié par son id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/beneficiaires/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crée un nouveau bénéficiaire. Si l\'id est fourni il sera ignoré.
         * @summary Crée un nouveau bénéficiaire.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire qui doit être créé
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (beneficiaireResource: BeneficiaireResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaireResource' is not null or undefined
            assertParamExists('create', 'beneficiaireResource', beneficiaireResource)
            const localVarPath = `/beneficiaires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(beneficiaireResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Le matricule est obligatoire. On peut rechercher par matricule seulement; ou par matricule date de naissance et rang. la recherche par matricule et rang seulement ou matricule et date de naissance seulement n\'est pas implémentée.
         * @summary Liste les bénéficiaires pour un matricule donné, et en option une date de naissance et un rang.
         * @param {string} matricule le matricule du bénéficiaire
         * @param {string} [dateNaissance] la date de naissance du bénéficiaire
         * @param {number} [rang] le rang du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (matricule: string, dateNaissance?: string, rang?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matricule' is not null or undefined
            assertParamExists('find', 'matricule', matricule)
            const localVarPath = `/beneficiaires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (matricule !== undefined) {
                localVarQueryParameter['matricule'] = matricule;
            }

            if (dateNaissance !== undefined) {
                localVarQueryParameter['date-naissance'] = (dateNaissance as any instanceof Date) ?
                    (dateNaissance as any).toISOString().substr(0,10) :
                    dateNaissance;
            }

            if (rang !== undefined) {
                localVarQueryParameter['rang'] = rang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lecture d\'un bénéficiaire par id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('read', 'id', id)
            const localVarPath = `/beneficiaires/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recherche le bénéficiaire dont l\'id est celui de l\'URL et associe le bénéficiaire fourni à cet id.
         * @summary Remplace un bénéficiaire existant par un autre.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {BeneficiaireResource} beneficiaireResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replace: async (id: number, beneficiaireResource: BeneficiaireResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replace', 'id', id)
            // verify required parameter 'beneficiaireResource' is not null or undefined
            assertParamExists('replace', 'beneficiaireResource', beneficiaireResource)
            const localVarPath = `/beneficiaires/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(beneficiaireResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ne permet de mettre à jour que le nom et/ou le prénom. Les autres champs du bénéficiaire envoyé servant à son identification.
         * @summary Met à jour un bénéficiaire existant.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire existant dont les noms et/ou prénoms doivent être mis à jour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (beneficiaireResource: BeneficiaireResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaireResource' is not null or undefined
            assertParamExists('update', 'beneficiaireResource', beneficiaireResource)
            const localVarPath = `/beneficiaires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authapp-V3 required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(beneficiaireResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BeneficiaireApi - functional programming interface
 * @export
 */
export const BeneficiaireApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BeneficiaireApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Supprime un bénéficiaire identifié par son id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crée un nouveau bénéficiaire. Si l\'id est fourni il sera ignoré.
         * @summary Crée un nouveau bénéficiaire.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire qui doit être créé
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(beneficiaireResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Le matricule est obligatoire. On peut rechercher par matricule seulement; ou par matricule date de naissance et rang. la recherche par matricule et rang seulement ou matricule et date de naissance seulement n\'est pas implémentée.
         * @summary Liste les bénéficiaires pour un matricule donné, et en option une date de naissance et un rang.
         * @param {string} matricule le matricule du bénéficiaire
         * @param {string} [dateNaissance] la date de naissance du bénéficiaire
         * @param {number} [rang] le rang du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(matricule: string, dateNaissance?: string, rang?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaireListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(matricule, dateNaissance, rang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lecture d\'un bénéficiaire par id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async read(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.read(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Recherche le bénéficiaire dont l\'id est celui de l\'URL et associe le bénéficiaire fourni à cet id.
         * @summary Remplace un bénéficiaire existant par un autre.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {BeneficiaireResource} beneficiaireResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replace(id: number, beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replace(id, beneficiaireResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Ne permet de mettre à jour que le nom et/ou le prénom. Les autres champs du bénéficiaire envoyé servant à son identification.
         * @summary Met à jour un bénéficiaire existant.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire existant dont les noms et/ou prénoms doivent être mis à jour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(beneficiaireResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BeneficiaireApi - factory interface
 * @export
 */
export const BeneficiaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BeneficiaireApiFp(configuration)
    return {
        /**
         * 
         * @summary Supprime un bénéficiaire identifié par son id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crée un nouveau bénéficiaire. Si l\'id est fourni il sera ignoré.
         * @summary Crée un nouveau bénéficiaire.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire qui doit être créé
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(beneficiaireResource: BeneficiaireResource, options?: any): AxiosPromise<BeneficiaireResponse> {
            return localVarFp.create(beneficiaireResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Le matricule est obligatoire. On peut rechercher par matricule seulement; ou par matricule date de naissance et rang. la recherche par matricule et rang seulement ou matricule et date de naissance seulement n\'est pas implémentée.
         * @summary Liste les bénéficiaires pour un matricule donné, et en option une date de naissance et un rang.
         * @param {string} matricule le matricule du bénéficiaire
         * @param {string} [dateNaissance] la date de naissance du bénéficiaire
         * @param {number} [rang] le rang du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(matricule: string, dateNaissance?: string, rang?: number, options?: any): AxiosPromise<BeneficiaireListResponse> {
            return localVarFp.find(matricule, dateNaissance, rang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lecture d\'un bénéficiaire par id.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read(id: number, options?: any): AxiosPromise<BeneficiaireResponse> {
            return localVarFp.read(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Recherche le bénéficiaire dont l\'id est celui de l\'URL et associe le bénéficiaire fourni à cet id.
         * @summary Remplace un bénéficiaire existant par un autre.
         * @param {number} id l\&#39;identifiant du bénéficiaire
         * @param {BeneficiaireResource} beneficiaireResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replace(id: number, beneficiaireResource: BeneficiaireResource, options?: any): AxiosPromise<BeneficiaireResponse> {
            return localVarFp.replace(id, beneficiaireResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Ne permet de mettre à jour que le nom et/ou le prénom. Les autres champs du bénéficiaire envoyé servant à son identification.
         * @summary Met à jour un bénéficiaire existant.
         * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire existant dont les noms et/ou prénoms doivent être mis à jour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(beneficiaireResource: BeneficiaireResource, options?: any): AxiosPromise<BeneficiaireResponse> {
            return localVarFp.update(beneficiaireResource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BeneficiaireApi - object-oriented interface
 * @export
 * @class BeneficiaireApi
 * @extends {BaseAPI}
 */
export class BeneficiaireApi extends BaseAPI {
    /**
     * 
     * @summary Supprime un bénéficiaire identifié par son id.
     * @param {number} id l\&#39;identifiant du bénéficiaire
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public _delete(id: number, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crée un nouveau bénéficiaire. Si l\'id est fourni il sera ignoré.
     * @summary Crée un nouveau bénéficiaire.
     * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire qui doit être créé
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public create(beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration).create(beneficiaireResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Le matricule est obligatoire. On peut rechercher par matricule seulement; ou par matricule date de naissance et rang. la recherche par matricule et rang seulement ou matricule et date de naissance seulement n\'est pas implémentée.
     * @summary Liste les bénéficiaires pour un matricule donné, et en option une date de naissance et un rang.
     * @param {string} matricule le matricule du bénéficiaire
     * @param {string} [dateNaissance] la date de naissance du bénéficiaire
     * @param {number} [rang] le rang du bénéficiaire
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public find(matricule: string, dateNaissance?: string, rang?: number, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration).find(matricule, dateNaissance, rang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lecture d\'un bénéficiaire par id.
     * @param {number} id l\&#39;identifiant du bénéficiaire
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public read(id: number, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration).read(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recherche le bénéficiaire dont l\'id est celui de l\'URL et associe le bénéficiaire fourni à cet id.
     * @summary Remplace un bénéficiaire existant par un autre.
     * @param {number} id l\&#39;identifiant du bénéficiaire
     * @param {BeneficiaireResource} beneficiaireResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public replace(id: number, beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration).replace(id, beneficiaireResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ne permet de mettre à jour que le nom et/ou le prénom. Les autres champs du bénéficiaire envoyé servant à son identification.
     * @summary Met à jour un bénéficiaire existant.
     * @param {BeneficiaireResource} beneficiaireResource Bénéficiaire existant dont les noms et/ou prénoms doivent être mis à jour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaireApi
     */
    public update(beneficiaireResource: BeneficiaireResource, options?: AxiosRequestConfig) {
        return BeneficiaireApiFp(this.configuration).update(beneficiaireResource, options).then((request) => request(this.axios, this.basePath));
    }
}


